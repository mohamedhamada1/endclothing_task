// Generated by Dagger (https://dagger.dev).
package uk.endclothing.task.core.di.modules;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Converter;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final NetworkModule module;

  private final Provider<OkHttpClient> clientProvider;

  private final Provider<Converter.Factory> factoryProvider;

  public NetworkModule_ProvideRetrofitFactory(NetworkModule module,
      Provider<OkHttpClient> clientProvider, Provider<Converter.Factory> factoryProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
    this.factoryProvider = factoryProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(module, clientProvider.get(), factoryProvider.get());
  }

  public static NetworkModule_ProvideRetrofitFactory create(NetworkModule module,
      Provider<OkHttpClient> clientProvider, Provider<Converter.Factory> factoryProvider) {
    return new NetworkModule_ProvideRetrofitFactory(module, clientProvider, factoryProvider);
  }

  public static Retrofit provideRetrofit(NetworkModule instance, OkHttpClient client,
      Converter.Factory factory) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofit(client, factory));
  }
}
