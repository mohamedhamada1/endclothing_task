// Generated by Dagger (https://dagger.dev).
package uk.endclothing.task.core.di.modules;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;
import uk.endclothing.task.core.remote.services.CatalogService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideCatalogServiceFactory implements Factory<CatalogService> {
  private final NetworkModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_ProvideCatalogServiceFactory(NetworkModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public CatalogService get() {
    return provideCatalogService(module, retrofitProvider.get());
  }

  public static NetworkModule_ProvideCatalogServiceFactory create(NetworkModule module,
      Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_ProvideCatalogServiceFactory(module, retrofitProvider);
  }

  public static CatalogService provideCatalogService(NetworkModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideCatalogService(retrofit));
  }
}
