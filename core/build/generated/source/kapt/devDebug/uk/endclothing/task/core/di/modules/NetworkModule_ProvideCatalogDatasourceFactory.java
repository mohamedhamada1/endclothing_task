// Generated by Dagger (https://dagger.dev).
package uk.endclothing.task.core.di.modules;

import com.squareup.moshi.Moshi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import uk.endclothing.task.core.remote.datasource.CatalogDataSource;
import uk.endclothing.task.core.remote.services.CatalogService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideCatalogDatasourceFactory implements Factory<CatalogDataSource> {
  private final NetworkModule module;

  private final Provider<CatalogService> serviceProvider;

  private final Provider<Moshi> moshiProvider;

  public NetworkModule_ProvideCatalogDatasourceFactory(NetworkModule module,
      Provider<CatalogService> serviceProvider, Provider<Moshi> moshiProvider) {
    this.module = module;
    this.serviceProvider = serviceProvider;
    this.moshiProvider = moshiProvider;
  }

  @Override
  public CatalogDataSource get() {
    return provideCatalogDatasource(module, serviceProvider.get(), moshiProvider.get());
  }

  public static NetworkModule_ProvideCatalogDatasourceFactory create(NetworkModule module,
      Provider<CatalogService> serviceProvider, Provider<Moshi> moshiProvider) {
    return new NetworkModule_ProvideCatalogDatasourceFactory(module, serviceProvider, moshiProvider);
  }

  public static CatalogDataSource provideCatalogDatasource(NetworkModule instance,
      CatalogService service, Moshi moshi) {
    return Preconditions.checkNotNullFromProvides(instance.provideCatalogDatasource(service, moshi));
  }
}
