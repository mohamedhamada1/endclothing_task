// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package uk.endclothing.task.core.remote.response

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ProductResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ProductResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "name", "price", "image")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "productId")

  public override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("ProductResponse").append(')') }

  public override fun fromJson(reader: JsonReader): ProductResponse {
    var productId: String? = null
    var productName: String? = null
    var productPrice: String? = null
    var productImg: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> productId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("productId",
            "id", reader)
        1 -> productName = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("productName", "name", reader)
        2 -> productPrice = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("productPrice", "price", reader)
        3 -> productImg = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("productImg",
            "image", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ProductResponse(
        productId = productId ?: throw Util.missingProperty("productId", "id", reader),
        productName = productName ?: throw Util.missingProperty("productName", "name", reader),
        productPrice = productPrice ?: throw Util.missingProperty("productPrice", "price", reader),
        productImg = productImg ?: throw Util.missingProperty("productImg", "image", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ProductResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    stringAdapter.toJson(writer, value_.productId)
    writer.name("name")
    stringAdapter.toJson(writer, value_.productName)
    writer.name("price")
    stringAdapter.toJson(writer, value_.productPrice)
    writer.name("image")
    stringAdapter.toJson(writer, value_.productImg)
    writer.endObject()
  }
}
