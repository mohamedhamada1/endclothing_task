// Generated by Dagger (https://dagger.dev).
package uk.endclothing.task.features.catalog.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import uk.endclothing.task.commons.ui.base.BaseFragment_MembersInjector;
import uk.endclothing.task.core.di.CoreComponent;
import uk.endclothing.task.core.remote.repo.catalog.CatalogRepo;
import uk.endclothing.task.features.catalog.CatalogListViewModel;
import uk.endclothing.task.features.catalog.FragmentCatalogList;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCatalogListComponent implements CatalogListComponent {
  private final DaggerCatalogListComponent catalogListComponent = this;

  private Provider<CatalogRepo> catalogRepoProvider;

  private Provider<CatalogListViewModel> provideViewModelProvider;

  private DaggerCatalogListComponent(CatalogListModule catalogListModuleParam,
      CoreComponent coreComponentParam) {

    initialize(catalogListModuleParam, coreComponentParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final CatalogListModule catalogListModuleParam,
      final CoreComponent coreComponentParam) {
    this.catalogRepoProvider = new uk_endclothing_task_core_di_CoreComponent_catalogRepo(coreComponentParam);
    this.provideViewModelProvider = DoubleCheck.provider(CatalogListModule_ProvideViewModelFactory.create(catalogListModuleParam, catalogRepoProvider));
  }

  @Override
  public void inject(FragmentCatalogList fragment) {
    injectFragmentCatalogList(fragment);
  }

  private FragmentCatalogList injectFragmentCatalogList(FragmentCatalogList instance) {
    BaseFragment_MembersInjector.injectViewModel(instance, provideViewModelProvider.get());
    return instance;
  }

  public static final class Builder {
    private CatalogListModule catalogListModule;

    private CoreComponent coreComponent;

    private Builder() {
    }

    public Builder catalogListModule(CatalogListModule catalogListModule) {
      this.catalogListModule = Preconditions.checkNotNull(catalogListModule);
      return this;
    }

    public Builder coreComponent(CoreComponent coreComponent) {
      this.coreComponent = Preconditions.checkNotNull(coreComponent);
      return this;
    }

    public CatalogListComponent build() {
      Preconditions.checkBuilderRequirement(catalogListModule, CatalogListModule.class);
      Preconditions.checkBuilderRequirement(coreComponent, CoreComponent.class);
      return new DaggerCatalogListComponent(catalogListModule, coreComponent);
    }
  }

  private static final class uk_endclothing_task_core_di_CoreComponent_catalogRepo implements Provider<CatalogRepo> {
    private final CoreComponent coreComponent;

    uk_endclothing_task_core_di_CoreComponent_catalogRepo(CoreComponent coreComponent) {
      this.coreComponent = coreComponent;
    }

    @Override
    public CatalogRepo get() {
      return Preconditions.checkNotNullFromComponent(coreComponent.catalogRepo());
    }
  }
}
